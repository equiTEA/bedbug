// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                                 String                      @id @default(cuid())
  username                           String                      @default("")
  email                              String                      @unique @default("")
  banned                             Boolean                     @default(false)
  password                           String
  role                               UserRoleType?
  ratings                            Rating[]                    @relation("Rating_createdBy")
  updatedRatings                     Rating[]                    @relation("Rating_updatedBy")
  deletedRatings                     Rating[]                    @relation("Rating_deletedBy")
  createdAddresses                   Address[]                   @relation("Address_createdBy")
  updatedAddresses                   Address[]                   @relation("Address_updatedBy")
  deletedAddresses                   Address[]                   @relation("Address_deletedBy")
  createdLandlords                   Landlord[]                  @relation("Landlord_createdBy")
  updatedLandlords                   Landlord[]                  @relation("Landlord_updatedBy")
  deletedLandlords                   Landlord[]                  @relation("Landlord_deletedBy")
  createdBusinesses                  Business[]                  @relation("Business_createdBy")
  updatedBusinesses                  Business[]                  @relation("Business_updatedBy")
  deletedBusinesses                  Business[]                  @relation("Business_deletedBy")
  createdPropertyManagementCompanies PropertyManagementCompany[] @relation("PropertyManagementCompany_createdBy")
  updatedPropertyManagementCompanies PropertyManagementCompany[] @relation("PropertyManagementCompany_updatedBy")
  deletedPropertyManagementCompanies PropertyManagementCompany[] @relation("PropertyManagementCompany_deletedBy")
}

model Rating {
  id                                        String                     @id @default(cuid())
  createdAt                                 DateTime                   @default(now())
  createdBy                                 User?                      @relation("Rating_createdBy", fields: [createdById], references: [id])
  createdById                               String?                    @map("createdBy")
  updatedAt                                 DateTime                   @default(now())
  updatedBy                                 User?                      @relation("Rating_updatedBy", fields: [updatedById], references: [id])
  updatedById                               String?                    @map("updatedBy")
  isDeleted                                 Boolean                    @default(false)
  deletedBy                                 User?                      @relation("Rating_deletedBy", fields: [deletedById], references: [id])
  deletedById                               String?                    @map("deletedBy")
  address                                   Address?                   @relation("Rating_address", fields: [addressId], references: [id])
  addressId                                 String?                    @map("address")
  landlordAtDateOfRating                    Landlord?                  @relation("Rating_landlordAtDateOfRating", fields: [landlordAtDateOfRatingId], references: [id])
  landlordAtDateOfRatingId                  String?                    @map("landlordAtDateOfRating")
  doingBusinessAsAtDateOfRating             Business?                  @relation("Rating_doingBusinessAsAtDateOfRating", fields: [doingBusinessAsAtDateOfRatingId], references: [id])
  doingBusinessAsAtDateOfRatingId           String?                    @map("doingBusinessAsAtDateOfRating")
  propertyManagementCompanyAtDateOfRating   PropertyManagementCompany? @relation("Rating_propertyManagementCompanyAtDateOfRating", fields: [propertyManagementCompanyAtDateOfRatingId], references: [id])
  propertyManagementCompanyAtDateOfRatingId String?                    @map("propertyManagementCompanyAtDateOfRating")
  sentiment                                 Int?
  body                                      String                     @default("")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
  @@index([addressId])
  @@index([landlordAtDateOfRatingId])
  @@index([doingBusinessAsAtDateOfRatingId])
  @@index([propertyManagementCompanyAtDateOfRatingId])
}

model Address {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  createdBy   User?    @relation("Address_createdBy", fields: [createdById], references: [id])
  createdById String?  @map("createdBy")
  updatedAt   DateTime @default(now())
  updatedBy   User?    @relation("Address_updatedBy", fields: [updatedById], references: [id])
  updatedById String?  @map("updatedBy")
  isDeleted   Boolean  @default(false)
  deletedBy   User?    @relation("Address_deletedBy", fields: [deletedById], references: [id])
  deletedById String?  @map("deletedBy")
  ratings     Rating[] @relation("Rating_address")
  isVerified  Boolean  @default(false)
  full        String   @default("")
  line1       String   @default("")
  line2       String   @default("")
  line3       String   @default("")
  city        String   @default("")
  state       String   @default("")
  zip         String   @default("")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Business {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  createdBy   User?      @relation("Business_createdBy", fields: [createdById], references: [id])
  createdById String?    @map("createdBy")
  updatedAt   DateTime   @default(now())
  updatedBy   User?      @relation("Business_updatedBy", fields: [updatedById], references: [id])
  updatedById String?    @map("updatedBy")
  isDeleted   Boolean    @default(false)
  deletedBy   User?      @relation("Business_deletedBy", fields: [deletedById], references: [id])
  deletedById String?    @map("deletedBy")
  landlords   Landlord[] @relation("Business_landlords")
  ratings     Rating[]   @relation("Rating_doingBusinessAsAtDateOfRating")
  name        String     @default("")
  isVerified  Boolean    @default(false)

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model Landlord {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  createdBy       User?      @relation("Landlord_createdBy", fields: [createdById], references: [id])
  createdById     String?    @map("createdBy")
  updatedAt       DateTime   @default(now())
  updatedBy       User?      @relation("Landlord_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?    @map("updatedBy")
  isDeleted       Boolean    @default(false)
  deletedBy       User?      @relation("Landlord_deletedBy", fields: [deletedById], references: [id])
  deletedById     String?    @map("deletedBy")
  name            String     @default("")
  isVerified      Boolean    @default(false)
  doingBusinessAs Business[] @relation("Business_landlords")
  ratings         Rating[]   @relation("Rating_landlordAtDateOfRating")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

model PropertyManagementCompany {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  createdBy   User?    @relation("PropertyManagementCompany_createdBy", fields: [createdById], references: [id])
  createdById String?  @map("createdBy")
  updatedAt   DateTime @default(now())
  updatedBy   User?    @relation("PropertyManagementCompany_updatedBy", fields: [updatedById], references: [id])
  updatedById String?  @map("updatedBy")
  isDeleted   Boolean  @default(false)
  deletedBy   User?    @relation("PropertyManagementCompany_deletedBy", fields: [deletedById], references: [id])
  deletedById String?  @map("deletedBy")
  name        String   @default("")
  isVerified  Boolean  @default(false)
  ratings     Rating[] @relation("Rating_propertyManagementCompanyAtDateOfRating")

  @@index([createdById])
  @@index([updatedById])
  @@index([deletedById])
}

enum UserRoleType {
  ADMIN
  MODERATOR
  TENANT
  LANDLORD
  PROPERTY_MANAGEMENT_COMPANY
}