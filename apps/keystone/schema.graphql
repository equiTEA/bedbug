# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  email: String
  banned: Boolean
  password: PasswordState
  role: UserRoleType
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
  updatedRatings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  updatedRatingsCount(where: RatingWhereInput! = {}): Int
  deletedRatings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  deletedRatingsCount(where: RatingWhereInput! = {}): Int
  createdAddresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  createdAddressesCount(where: AddressWhereInput! = {}): Int
  updatedAddresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  updatedAddressesCount(where: AddressWhereInput! = {}): Int
  deletedAddresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  deletedAddressesCount(where: AddressWhereInput! = {}): Int
  createdLandlords(
    where: LandlordWhereInput! = {}
    orderBy: [LandlordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Landlord!]
  createdLandlordsCount(where: LandlordWhereInput! = {}): Int
  updatedLandlords(
    where: LandlordWhereInput! = {}
    orderBy: [LandlordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Landlord!]
  updatedLandlordsCount(where: LandlordWhereInput! = {}): Int
  deletedLandlords(
    where: LandlordWhereInput! = {}
    orderBy: [LandlordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Landlord!]
  deletedLandlordsCount(where: LandlordWhereInput! = {}): Int
  createdBusinesses(
    where: BusinessWhereInput! = {}
    orderBy: [BusinessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Business!]
  createdBusinessesCount(where: BusinessWhereInput! = {}): Int
  updatedBusinesses(
    where: BusinessWhereInput! = {}
    orderBy: [BusinessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Business!]
  updatedBusinessesCount(where: BusinessWhereInput! = {}): Int
  deletedBusinesses(
    where: BusinessWhereInput! = {}
    orderBy: [BusinessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Business!]
  deletedBusinessesCount(where: BusinessWhereInput! = {}): Int
  createdPropertyManagementCompanies(
    where: PropertyManagementCompanyWhereInput! = {}
    orderBy: [PropertyManagementCompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PropertyManagementCompany!]
  createdPropertyManagementCompaniesCount(
    where: PropertyManagementCompanyWhereInput! = {}
  ): Int
  updatedPropertyManagementCompanies(
    where: PropertyManagementCompanyWhereInput! = {}
    orderBy: [PropertyManagementCompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PropertyManagementCompany!]
  updatedPropertyManagementCompaniesCount(
    where: PropertyManagementCompanyWhereInput! = {}
  ): Int
  deletedPropertyManagementCompanies(
    where: PropertyManagementCompanyWhereInput! = {}
    orderBy: [PropertyManagementCompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PropertyManagementCompany!]
  deletedPropertyManagementCompaniesCount(
    where: PropertyManagementCompanyWhereInput! = {}
  ): Int
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  ADMIN
  MODERATOR
  TENANT
  LANDLORD
  PROPERTY_MANAGEMENT_COMPANY
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  banned: BooleanFilter
  role: UserRoleTypeNullableFilter
  ratings: RatingManyRelationFilter
  updatedRatings: RatingManyRelationFilter
  deletedRatings: RatingManyRelationFilter
  createdAddresses: AddressManyRelationFilter
  updatedAddresses: AddressManyRelationFilter
  deletedAddresses: AddressManyRelationFilter
  createdLandlords: LandlordManyRelationFilter
  updatedLandlords: LandlordManyRelationFilter
  deletedLandlords: LandlordManyRelationFilter
  createdBusinesses: BusinessManyRelationFilter
  updatedBusinesses: BusinessManyRelationFilter
  deletedBusinesses: BusinessManyRelationFilter
  createdPropertyManagementCompanies: PropertyManagementCompanyManyRelationFilter
  updatedPropertyManagementCompanies: PropertyManagementCompanyManyRelationFilter
  deletedPropertyManagementCompanies: PropertyManagementCompanyManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input RatingManyRelationFilter {
  every: RatingWhereInput
  some: RatingWhereInput
  none: RatingWhereInput
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input LandlordManyRelationFilter {
  every: LandlordWhereInput
  some: LandlordWhereInput
  none: LandlordWhereInput
}

input BusinessManyRelationFilter {
  every: BusinessWhereInput
  some: BusinessWhereInput
  none: BusinessWhereInput
}

input PropertyManagementCompanyManyRelationFilter {
  every: PropertyManagementCompanyWhereInput
  some: PropertyManagementCompanyWhereInput
  none: PropertyManagementCompanyWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  banned: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  email: String
  banned: Boolean
  password: String
  role: UserRoleType
  ratings: RatingRelateToManyForUpdateInput
  updatedRatings: RatingRelateToManyForUpdateInput
  deletedRatings: RatingRelateToManyForUpdateInput
  createdAddresses: AddressRelateToManyForUpdateInput
  updatedAddresses: AddressRelateToManyForUpdateInput
  deletedAddresses: AddressRelateToManyForUpdateInput
  createdLandlords: LandlordRelateToManyForUpdateInput
  updatedLandlords: LandlordRelateToManyForUpdateInput
  deletedLandlords: LandlordRelateToManyForUpdateInput
  createdBusinesses: BusinessRelateToManyForUpdateInput
  updatedBusinesses: BusinessRelateToManyForUpdateInput
  deletedBusinesses: BusinessRelateToManyForUpdateInput
  createdPropertyManagementCompanies: PropertyManagementCompanyRelateToManyForUpdateInput
  updatedPropertyManagementCompanies: PropertyManagementCompanyRelateToManyForUpdateInput
  deletedPropertyManagementCompanies: PropertyManagementCompanyRelateToManyForUpdateInput
}

input RatingRelateToManyForUpdateInput {
  disconnect: [RatingWhereUniqueInput!]
  set: [RatingWhereUniqueInput!]
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input LandlordRelateToManyForUpdateInput {
  disconnect: [LandlordWhereUniqueInput!]
  set: [LandlordWhereUniqueInput!]
  create: [LandlordCreateInput!]
  connect: [LandlordWhereUniqueInput!]
}

input BusinessRelateToManyForUpdateInput {
  disconnect: [BusinessWhereUniqueInput!]
  set: [BusinessWhereUniqueInput!]
  create: [BusinessCreateInput!]
  connect: [BusinessWhereUniqueInput!]
}

input PropertyManagementCompanyRelateToManyForUpdateInput {
  disconnect: [PropertyManagementCompanyWhereUniqueInput!]
  set: [PropertyManagementCompanyWhereUniqueInput!]
  create: [PropertyManagementCompanyCreateInput!]
  connect: [PropertyManagementCompanyWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  banned: Boolean
  password: String
  role: UserRoleType
  ratings: RatingRelateToManyForCreateInput
  updatedRatings: RatingRelateToManyForCreateInput
  deletedRatings: RatingRelateToManyForCreateInput
  createdAddresses: AddressRelateToManyForCreateInput
  updatedAddresses: AddressRelateToManyForCreateInput
  deletedAddresses: AddressRelateToManyForCreateInput
  createdLandlords: LandlordRelateToManyForCreateInput
  updatedLandlords: LandlordRelateToManyForCreateInput
  deletedLandlords: LandlordRelateToManyForCreateInput
  createdBusinesses: BusinessRelateToManyForCreateInput
  updatedBusinesses: BusinessRelateToManyForCreateInput
  deletedBusinesses: BusinessRelateToManyForCreateInput
  createdPropertyManagementCompanies: PropertyManagementCompanyRelateToManyForCreateInput
  updatedPropertyManagementCompanies: PropertyManagementCompanyRelateToManyForCreateInput
  deletedPropertyManagementCompanies: PropertyManagementCompanyRelateToManyForCreateInput
}

input RatingRelateToManyForCreateInput {
  create: [RatingCreateInput!]
  connect: [RatingWhereUniqueInput!]
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input LandlordRelateToManyForCreateInput {
  create: [LandlordCreateInput!]
  connect: [LandlordWhereUniqueInput!]
}

input BusinessRelateToManyForCreateInput {
  create: [BusinessCreateInput!]
  connect: [BusinessWhereUniqueInput!]
}

input PropertyManagementCompanyRelateToManyForCreateInput {
  create: [PropertyManagementCompanyCreateInput!]
  connect: [PropertyManagementCompanyWhereUniqueInput!]
}

type Rating {
  id: ID!
  createdAt: DateTime
  createdBy: User
  updatedAt: DateTime
  updatedBy: User
  isDeleted: Boolean
  deletedBy: User
  address: Address
  landlordAtDateOfRating: Landlord
  doingBusinessAsAtDateOfRating: Business
  propertyManagementCompanyAtDateOfRating: PropertyManagementCompany
  sentiment: Int
  body: String
  rentPrice: Float
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input RatingWhereUniqueInput {
  id: ID
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  isDeleted: BooleanFilter
  deletedBy: UserWhereInput
  address: AddressWhereInput
  landlordAtDateOfRating: LandlordWhereInput
  doingBusinessAsAtDateOfRating: BusinessWhereInput
  propertyManagementCompanyAtDateOfRating: PropertyManagementCompanyWhereInput
  sentiment: IntNullableFilter
  body: StringFilter
  rentPrice: FloatFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input RatingOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  isDeleted: OrderDirection
  sentiment: OrderDirection
  body: OrderDirection
  rentPrice: OrderDirection
}

input RatingUpdateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForUpdateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForUpdateInput
  address: AddressRelateToOneForUpdateInput
  landlordAtDateOfRating: LandlordRelateToOneForUpdateInput
  doingBusinessAsAtDateOfRating: BusinessRelateToOneForUpdateInput
  propertyManagementCompanyAtDateOfRating: PropertyManagementCompanyRelateToOneForUpdateInput
  sentiment: Int
  body: String
  rentPrice: Float
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AddressRelateToOneForUpdateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
  disconnect: Boolean
}

input LandlordRelateToOneForUpdateInput {
  create: LandlordCreateInput
  connect: LandlordWhereUniqueInput
  disconnect: Boolean
}

input BusinessRelateToOneForUpdateInput {
  create: BusinessCreateInput
  connect: BusinessWhereUniqueInput
  disconnect: Boolean
}

input PropertyManagementCompanyRelateToOneForUpdateInput {
  create: PropertyManagementCompanyCreateInput
  connect: PropertyManagementCompanyWhereUniqueInput
  disconnect: Boolean
}

input RatingUpdateArgs {
  where: RatingWhereUniqueInput!
  data: RatingUpdateInput!
}

input RatingCreateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForCreateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForCreateInput
  address: AddressRelateToOneForCreateInput
  landlordAtDateOfRating: LandlordRelateToOneForCreateInput
  doingBusinessAsAtDateOfRating: BusinessRelateToOneForCreateInput
  propertyManagementCompanyAtDateOfRating: PropertyManagementCompanyRelateToOneForCreateInput
  sentiment: Int
  body: String
  rentPrice: Float
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input AddressRelateToOneForCreateInput {
  create: AddressCreateInput
  connect: AddressWhereUniqueInput
}

input LandlordRelateToOneForCreateInput {
  create: LandlordCreateInput
  connect: LandlordWhereUniqueInput
}

input BusinessRelateToOneForCreateInput {
  create: BusinessCreateInput
  connect: BusinessWhereUniqueInput
}

input PropertyManagementCompanyRelateToOneForCreateInput {
  create: PropertyManagementCompanyCreateInput
  connect: PropertyManagementCompanyWhereUniqueInput
}

type Address {
  id: ID!
  createdAt: DateTime
  createdBy: User
  updatedAt: DateTime
  updatedBy: User
  isDeleted: Boolean
  deletedBy: User
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
  isVerified: Boolean
  full: String
  line1: String
  line2: String
  line3: String
  city: String
  state: String
  zip: String
  countryCode: String
  avgRating: Float
  ratingCount: Int
  mostRecentLandlord: JSON
  mostRecentPropertyManagementCompany: JSON
  mostRecentDoingBusinessAs: JSON
  mostRecentRentPrice: Float
}

input AddressWhereUniqueInput {
  id: ID
  full: String
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  isDeleted: BooleanFilter
  deletedBy: UserWhereInput
  ratings: RatingManyRelationFilter
  isVerified: BooleanFilter
  full: StringFilter
  line1: StringFilter
  line2: StringFilter
  line3: StringFilter
  city: StringFilter
  state: StringFilter
  zip: StringFilter
  countryCode: StringFilter
}

input AddressOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  isDeleted: OrderDirection
  isVerified: OrderDirection
  full: OrderDirection
  line1: OrderDirection
  line2: OrderDirection
  line3: OrderDirection
  city: OrderDirection
  state: OrderDirection
  zip: OrderDirection
  countryCode: OrderDirection
}

input AddressUpdateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForUpdateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForUpdateInput
  ratings: RatingRelateToManyForUpdateInput
  isVerified: Boolean
  full: String
  line1: String
  line2: String
  line3: String
  city: String
  state: String
  zip: String
  countryCode: String
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForCreateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForCreateInput
  ratings: RatingRelateToManyForCreateInput
  isVerified: Boolean
  full: String
  line1: String
  line2: String
  line3: String
  city: String
  state: String
  zip: String
  countryCode: String
}

type Business {
  id: ID!
  createdAt: DateTime
  createdBy: User
  updatedAt: DateTime
  updatedBy: User
  isDeleted: Boolean
  deletedBy: User
  landlords(
    where: LandlordWhereInput! = {}
    orderBy: [LandlordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Landlord!]
  landlordsCount(where: LandlordWhereInput! = {}): Int
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
  name: String
  isVerified: Boolean
  avgRating: Float
}

input BusinessWhereUniqueInput {
  id: ID
}

input BusinessWhereInput {
  AND: [BusinessWhereInput!]
  OR: [BusinessWhereInput!]
  NOT: [BusinessWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  isDeleted: BooleanFilter
  deletedBy: UserWhereInput
  landlords: LandlordManyRelationFilter
  ratings: RatingManyRelationFilter
  name: StringFilter
  isVerified: BooleanFilter
}

input BusinessOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  isDeleted: OrderDirection
  name: OrderDirection
  isVerified: OrderDirection
}

input BusinessUpdateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForUpdateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForUpdateInput
  landlords: LandlordRelateToManyForUpdateInput
  ratings: RatingRelateToManyForUpdateInput
  name: String
  isVerified: Boolean
}

input BusinessUpdateArgs {
  where: BusinessWhereUniqueInput!
  data: BusinessUpdateInput!
}

input BusinessCreateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForCreateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForCreateInput
  landlords: LandlordRelateToManyForCreateInput
  ratings: RatingRelateToManyForCreateInput
  name: String
  isVerified: Boolean
}

type Landlord {
  id: ID!
  createdAt: DateTime
  createdBy: User
  updatedAt: DateTime
  updatedBy: User
  isDeleted: Boolean
  deletedBy: User
  name: String
  isVerified: Boolean
  doingBusinessAs(
    where: BusinessWhereInput! = {}
    orderBy: [BusinessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Business!]
  doingBusinessAsCount(where: BusinessWhereInput! = {}): Int
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
  avgRating: Float
}

input LandlordWhereUniqueInput {
  id: ID
}

input LandlordWhereInput {
  AND: [LandlordWhereInput!]
  OR: [LandlordWhereInput!]
  NOT: [LandlordWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  isDeleted: BooleanFilter
  deletedBy: UserWhereInput
  name: StringFilter
  isVerified: BooleanFilter
  doingBusinessAs: BusinessManyRelationFilter
  ratings: RatingManyRelationFilter
}

input LandlordOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  isDeleted: OrderDirection
  name: OrderDirection
  isVerified: OrderDirection
}

input LandlordUpdateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForUpdateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForUpdateInput
  name: String
  isVerified: Boolean
  doingBusinessAs: BusinessRelateToManyForUpdateInput
  ratings: RatingRelateToManyForUpdateInput
}

input LandlordUpdateArgs {
  where: LandlordWhereUniqueInput!
  data: LandlordUpdateInput!
}

input LandlordCreateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForCreateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForCreateInput
  name: String
  isVerified: Boolean
  doingBusinessAs: BusinessRelateToManyForCreateInput
  ratings: RatingRelateToManyForCreateInput
}

type PropertyManagementCompany {
  id: ID!
  createdAt: DateTime
  createdBy: User
  updatedAt: DateTime
  updatedBy: User
  isDeleted: Boolean
  deletedBy: User
  name: String
  isVerified: Boolean
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  ratingsCount(where: RatingWhereInput! = {}): Int
  avgRating: Float
}

input PropertyManagementCompanyWhereUniqueInput {
  id: ID
}

input PropertyManagementCompanyWhereInput {
  AND: [PropertyManagementCompanyWhereInput!]
  OR: [PropertyManagementCompanyWhereInput!]
  NOT: [PropertyManagementCompanyWhereInput!]
  id: IDFilter
  createdAt: DateTimeFilter
  createdBy: UserWhereInput
  updatedAt: DateTimeFilter
  updatedBy: UserWhereInput
  isDeleted: BooleanFilter
  deletedBy: UserWhereInput
  name: StringFilter
  isVerified: BooleanFilter
  ratings: RatingManyRelationFilter
}

input PropertyManagementCompanyOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  isDeleted: OrderDirection
  name: OrderDirection
  isVerified: OrderDirection
}

input PropertyManagementCompanyUpdateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForUpdateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForUpdateInput
  name: String
  isVerified: Boolean
  ratings: RatingRelateToManyForUpdateInput
}

input PropertyManagementCompanyUpdateArgs {
  where: PropertyManagementCompanyWhereUniqueInput!
  data: PropertyManagementCompanyUpdateInput!
}

input PropertyManagementCompanyCreateInput {
  createdAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedAt: DateTime
  updatedBy: UserRelateToOneForCreateInput
  isDeleted: Boolean
  deletedBy: UserRelateToOneForCreateInput
  name: String
  isVerified: Boolean
  ratings: RatingRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRating(data: RatingCreateInput!): Rating
  createRatings(data: [RatingCreateInput!]!): [Rating]
  updateRating(where: RatingWhereUniqueInput!, data: RatingUpdateInput!): Rating
  updateRatings(data: [RatingUpdateArgs!]!): [Rating]
  deleteRating(where: RatingWhereUniqueInput!): Rating
  deleteRatings(where: [RatingWhereUniqueInput!]!): [Rating]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(
    where: AddressWhereUniqueInput!
    data: AddressUpdateInput!
  ): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createBusiness(data: BusinessCreateInput!): Business
  createBusinesses(data: [BusinessCreateInput!]!): [Business]
  updateBusiness(
    where: BusinessWhereUniqueInput!
    data: BusinessUpdateInput!
  ): Business
  updateBusinesses(data: [BusinessUpdateArgs!]!): [Business]
  deleteBusiness(where: BusinessWhereUniqueInput!): Business
  deleteBusinesses(where: [BusinessWhereUniqueInput!]!): [Business]
  createLandlord(data: LandlordCreateInput!): Landlord
  createLandlords(data: [LandlordCreateInput!]!): [Landlord]
  updateLandlord(
    where: LandlordWhereUniqueInput!
    data: LandlordUpdateInput!
  ): Landlord
  updateLandlords(data: [LandlordUpdateArgs!]!): [Landlord]
  deleteLandlord(where: LandlordWhereUniqueInput!): Landlord
  deleteLandlords(where: [LandlordWhereUniqueInput!]!): [Landlord]
  createPropertyManagementCompany(
    data: PropertyManagementCompanyCreateInput!
  ): PropertyManagementCompany
  createPropertyManagementCompanies(
    data: [PropertyManagementCompanyCreateInput!]!
  ): [PropertyManagementCompany]
  updatePropertyManagementCompany(
    where: PropertyManagementCompanyWhereUniqueInput!
    data: PropertyManagementCompanyUpdateInput!
  ): PropertyManagementCompany
  updatePropertyManagementCompanies(
    data: [PropertyManagementCompanyUpdateArgs!]!
  ): [PropertyManagementCompany]
  deletePropertyManagementCompany(
    where: PropertyManagementCompanyWhereUniqueInput!
  ): PropertyManagementCompany
  deletePropertyManagementCompanies(
    where: [PropertyManagementCompanyWhereUniqueInput!]!
  ): [PropertyManagementCompany]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  email: String
  banned: Boolean
  password: String
  role: UserRoleType
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  ratings(
    where: RatingWhereInput! = {}
    orderBy: [RatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rating!]
  rating(where: RatingWhereUniqueInput!): Rating
  ratingsCount(where: RatingWhereInput! = {}): Int
  addresses(
    where: AddressWhereInput! = {}
    orderBy: [AddressOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Address!]
  address(where: AddressWhereUniqueInput!): Address
  addressesCount(where: AddressWhereInput! = {}): Int
  businesses(
    where: BusinessWhereInput! = {}
    orderBy: [BusinessOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Business!]
  business(where: BusinessWhereUniqueInput!): Business
  businessesCount(where: BusinessWhereInput! = {}): Int
  landlords(
    where: LandlordWhereInput! = {}
    orderBy: [LandlordOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Landlord!]
  landlord(where: LandlordWhereUniqueInput!): Landlord
  landlordsCount(where: LandlordWhereInput! = {}): Int
  propertyManagementCompanies(
    where: PropertyManagementCompanyWhereInput! = {}
    orderBy: [PropertyManagementCompanyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PropertyManagementCompany!]
  propertyManagementCompany(
    where: PropertyManagementCompanyWhereUniqueInput!
  ): PropertyManagementCompany
  propertyManagementCompaniesCount(
    where: PropertyManagementCompanyWhereInput! = {}
  ): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  forwardGeocode(address: String!): [ForwardGeocodeResult!]!
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

type ForwardGeocodeResult {
  latitude: Float!
  longitude: Float!
  full: String!
  line1: String!
  city: String!
  state: String!
  zip: String!

  """
  Supplemental /  Nice to have
  """
  neighborhood: String
  countryCode: String!
}
